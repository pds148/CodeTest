import java.util.*;

class Solution {
    
    private int departX;
    private int departY;
    
    public int[] solution(String[] park, String[] routes) {
        int[] answer = new int[2];
        
        Map<String, int[]> map = new HashMap<>();
        map.put("N", new int[]{-1, 0});
        map.put("E", new int[]{0, 1});
        map.put("S", new int[]{1, 0});
        map.put("W", new int[]{0, -1});
       
        departX = 0;
        departY = 0;
        
        String[][] arr = new String[park.length][park[0].length()];
        for (int i=0; i<park.length; i++) {
            String[] temp = park[i].split("");
            for (int j=0; j<temp.length; j++) {
                arr[i][j] = temp[j];
                if (temp[j].equals("S")) {
                    departX = i;
                    departY = j;
                }
            }
        }
        
        for(int i = 0; i < routes.length; i++) {
            String[] temp = routes[i].split(" ");
            int[] movePoint = map.get(temp[0]);
            move(arr, departX, departY, movePoint, Integer.parseInt(temp[1]));
        }
        
        answer[0] = departX;
        answer[1] = departY;
        return answer;
    }
    
    public void move(String[][] arr, int x, int y, int[] movePoint, int cnt) {
        if (cnt == 0) {
            departX = x;
            departY = y;
            return;
        }
        
        int movementX = x + movePoint[0];
        int movementY = y + movePoint[1];
        if (movementX >= 0 && movementX < arr.length && movementY >= 0 && movementY < arr[0].length) {
            if (!arr[movementX][movementY].equals("X")) {
                move(arr, movementX, movementY, movePoint, cnt-1);
            }
        }
    }
}
