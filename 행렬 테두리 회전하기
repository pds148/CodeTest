import java.util.*;

class Solution {
    public int[] solution(int rows, int columns, int[][] queries) {
        int[][] matrix = new int[rows][columns];
        int num = 1;
        
        for (int i=0; i<rows; i++) {
            for (int j=0; j<columns; j++) {
                matrix[i][j] = num++;
            }
        }
        
        List<Integer> answerList = new ArrayList<>();
        
        for (int[] query : queries) {
            answerList.add(rotate(matrix, query));
        }
        
        int[] answer = new int[answerList.size()];
        for (int i=0; i<answerList.size(); i++) {
            answer[i] = answerList.get(i);
        }
        
        return answer;
    }
    
    private int rotate(int[][] matrix, int[] query) {
        int x1 = query[0] - 1;
        int y1 = query[1] - 1;
        int x2 = query[2] - 1;
        int y2 = query[3] - 1;
        
        int temp = matrix[x1][y1];
        int min = temp;
        
        for (int i=x1; i<x2; i++) {
            matrix[i][y1] = matrix[i+1][y1];
            min = Math.min(min, matrix[i][y1]);
        }
        
        for (int i=y1; i<y2; i++) {
            matrix[x2][i] = matrix[x2][i+1];
            min = Math.min(min, matrix[x2][i]);
        }
        
        for (int i=x2; i>x1; i--) {
            matrix[i][y2] = matrix[i-1][y2];
            min = Math.min(min, matrix[i][y2]);
        }
        
        for (int i=y2; i>y1; i--) {
            matrix[x1][i] = matrix[x1][i-1];
            min = Math.min(min, matrix[x1][i]);
        }
        
        matrix[x1][y1+1] = temp;
        
        return min;
    }
}
