import java.util.*;

class Solution {
    public int solution(String numbers) {
        Set<Integer> primeSet = new HashSet<>();
        generatePermutations("", numbers, primeSet);
        return primeSet.size();
    }
    
    private void generatePermutations(String prefix, String remaining, Set<Integer> primeSet) {
        int n = remaining.length();
        if (!prefix.equals("")) {
            int num = Integer.parseInt(prefix);
            if (isPrime(num))
                primeSet.add(num);
        }
        for (int i = 0; i < n; i++)
            generatePermutations(prefix + remaining.charAt(i), remaining.substring(0, i) + remaining.substring(i + 1, n), primeSet);
    }
    
    private boolean isPrime(int num) {
        if (num <= 1)
            return false;
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0)
                return false;
        }
        return true;
    }
}
